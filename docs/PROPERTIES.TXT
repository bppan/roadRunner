SINTAX OF RoadRunner CONFIGURATION FILESHere follows a brief description of the syntax of the XML configuration filesused to tune the wrapper generation. Here we refer to the defaults.xml file youcan find in the distribution under the directory roadrunner/config/It is structured into 4 sections, each one composed of several entries in theform: <property_name value="property_value"/>, which we simply call "property"- tokenization    the properties in this section configure the lexical analysis of the input    document into a stream of tokens, which will be the input of the RR inference    engine- generation    the properties in this section configure the wrapper generation process- labelling    the properties in this section configure the automatic labelling of extracted attributes- output    the properties in this section configure the way RR produces its outputAll these properties can be easily overwritten by using the roadrunner.Shelloption -OTOKENIZATION SECTIONThis section configures the way RR translates the input XHTML document into astream of tokens which is then passed to the RR inference engine.For a general point of view, RR takes the DOM document representing the input webpages and translates it into a stream of token by means of an in-order visit of the DOM treeEach open tag, close tag and text string is converted into a token. All other typeof DOM nodes are ignored. Observe that RR is sensitive to attribute names and notto attributes values. For instance, given three HTML tags:<A href="anurl.html"> ; A href="anotherurl.html"> ; A href="yau.html" target="blank">the first two tags are considered completely equivalent whereas the latter isconsidered as a distinct token.The properties of the "Tokenization" section allow to tune the lexical analysis.<skipTags value=""/>  set of names of tag which should be ignored during the DOM visit<skipTrees value="script,style"/>  same as above but it discards whole DOM subtrees<skipAttributes value="selected,bgcolor"/>  name of attributes of tags which should be ignored.<attributeValues value="id,class"/>  name of attributes whose values should be considered during the lexical analysis.  Two html tags with the same element name and the same attribute names  are considered different tokens if the values of these attributes are  different. For example, <TD class="entry"> and <TD class="head"> would be seen  as two  distinct tokens whereas <TD valign="top"> and <TD valign="bottom">  would be seen as equivalentThe other properties of this section configure the freetext handling.RR works on input document whose structure is fairly regular. We expect that theHTML tags are somehow used to mark the structure, and the text strings are usedto give the contents. Unfortunately, some HTML tags are used only for presentationalpurposes, even on data intensive websites. There are set of properties to configure anheuristic we use to detect freetext chunks. This heuristic is used to collapse a sequenceof otherwise contiguous text and tag tokens into a single text token<freetext value="false"/>  true to enable the collapsing of contiguous freetext chunks into one text token<freetextTags value="a,font,b,i,span,sup"/>  specify a set of tag names to be considered as a freetext chunck whenever all the  children in the DOM are freetext chuncks<variantTags value="a,font,b,i,span,sup"/>  specify a set of tag names to be considered as freetext chuncks whenever they  are leaf node in the DOM representation<keepTags value="false"/>  true if a text node resulting from the collapsing of several adjacent chunks  of free text should keep a trace of the tags which has been collapsed in itGENERATION SECTIONThis section configure the inference process. Refer to the following papersto get more info on the algorithm and the matching technique it is based on.Valter Crescenzi, Giansalvatore Mecca, Paolo Merialdo: RoadRunner: TowardsAutomatic Data Extraction from Large Web Sites. Proc. of 27th InternationalConference on Very Large Databases (VLDB 2001): 109-118Valter Crescenzi, Giansalvatore Mecca, On Automatic Information Extraction fromLarge Web Sites. Dip. Informatica ed Automazione Technical Report dia-76-2003.This technical report explains as the RR's inference can be seen as a search ina space of states in which each state corresponds to a regular expression.Enable backtracking in the search space: <backtracking value="true"/>The following properties enable the operators to use in the search space:    <useHooks value="true"/>    <usePluses value="true"/>    <useSubtrees value="true"/>The max number of solutions to search in the state space: <solutions value="5"/>The number of square delimiter occurrences to consider: <occurrences value="4"/>The property "step0" specifies that the search should start from an initialexpression computed by matching the input samples when the only operator enabledis addSubtree: <step0 value="true"/>The property "collapsingbt" inserts point of backtracking during the collapsing phaseof operator addPlus. Namely, a backtrack point is inserted whenever a subtreeis inserted in the square to continue the collapsing: <collapsingbt value="false"/>The property "ambiguity" enables the creation of fake mismatches to face intrinsicambiguity of HTML code. For example, consider the two samples to be matched fromleft to right:...<TABLE> <TR> <TD> <A> a text X </A> </TD> </TR> </TABLE>...<TABLE> <TR> <TD> a text Y </A> </TD> </TR> </TABLE>a mismatch is detected between <A> and "a text Y". Setting <ambiguity value="1"/>,RR generates another mismatch between <TD> and <TD> (i.e. one level upwardsin the DOM tree) and by setting <ambiguity value="2"/>, it also generates amismatch between <TR> and <TR> (i.e. two levels upwards in the DOM tree).Allow iterators to be adjacent to optionals:  <freePlus value="true"/>These properties constraint the inference engine to produce LL(k)regular expressions. Its equivalent in right to left direction is RR(k):    <LLk value="5"/>    <RRk value="5"/>LABELLING SECTIONOnce a wrapper has been generated, it is possible to ask RR to guess a suitablelabel for extracted attributes. The simplest heuristic that RR Labeller uses isbased on the search of a common prefix or suffix of extracted values.It can be enabled by setting.    <prefixLabelling value="true"/>A more interesting technique based on the visual rendering of web pages asdisplayed by any graphical browser. It can be enabled by setting    <visualLabelling value="true"/>This techinque is explained in the paper:Valter Crescenzi, Giansalvatore Mecca, Paolo Merialdo Automatic Annotation ofData Extracted from Large Web Sites. SIGMOD Conference 2003, WebDB Workshop.There you can also find a precise description of the following parameters:    <minLabelLen value="3"/>    <maxLabelLen value="16"/>    <maxSinAlpha value="0.2"/>    <maxDistance value="250"/>Note that in order to use the RR visual labelling feature, the input xhtml documentmust be adorned with html comments reporting the coordinates of the bounding boxof every text string in the visual rendering of the document. Just to give anexample of what RR Labeller expects, the following fragment of XHTML code:...<TR><TD><!--BB:10,10,60,20--> a text X</TD><TD><!--BB:70,10,120,30--> a text Y</TD></TR>...states that the coordinates of the bounding box of the string "a text X" in thevisual rendering of the document are (minX=10, minY=10,  maxX=60, maxY=20);similarly for "a text Y".Finally, the properties    <trimLabels value="true"/>simply enable the processing of texts from input documents to be considered as labelsin order to remove punctuaction chars and similarsOUTPUT SECTIONThese section contains properties that RR uses to produce output.Namely the property    <outputdir value="output"/>set the name of the directory in which RR save the output in XML format.    The properties:    <dataset_style value="roadrunner/marshall/style/data.xsl"/>    <index_style value="roadrunner/marshall/style/index.xsl"/>set the stylesheet files to display the XML RR output.Next property is unused:    <browser value="mozilla"/>REFERENCESThe general ideas underlying the RoadRunner Project can be found in the following papers:Valter Crescenzi, Giansalvatore Mecca, Paolo Merialdo: RoadRunner: TowardsAutomatic Data Extraction from Large Web Sites. Proc. of 27th InternationalConference on Very Large Databases (VLDB 2001): 109-118http://www.vldb.org/conf/2001/P109.pdfValter Crescenzi, Giansalvatore Mecca, Paolo Merialdo Automatic Annotation ofData Extracted from Large Web Sites. SIGMOD Conference 2003, WebDB Workshop.http://doi.acm.org/10.1145/643477.643480Valter Crescenzi, Giansalvatore Mecca, On Automatic Information Extraction fromLarge Web Sites. Dip. Informatica ed Automazione Technical Report dia-76-2003.http://www.dia.uniroma3.it/db/roadRunner/publications/dia-76-2003.ps.gz